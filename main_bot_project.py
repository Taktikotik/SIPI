import json
import soundfile
import wave
import yandex_tracker_client as ya
from revChatGPT.V1 import Chatbot
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from vosk import Model, KaldiRecognizer
from ultralytics import YOLO
from PIL import Image

GPT_key = ('ChatGPT_KEY')  # –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ
# https://chat.openai.com/api/auth/session –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "accessToken"

BOT_API = 'Bot_API'  # –í–ø–∏—à–∏—Ç–µ API —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞

model = Model('vosk-model-small-ru-0.22')  # –ò–º—è –ø–∞–ø–∫–∏ vosk –º–æ–¥–µ–ª–∏
rec = KaldiRecognizer(model, 44100)

path = "/files/voices"  # –ü—É—Ç—å –¥–æ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

GPT_use = False
GPT_ask = False
punctuation = False

bot = Bot(token=BOT_API)
dp = Dispatcher(bot)

#  –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb = types.ReplyKeyboardMarkup([[types.KeyboardButton('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.')]], resize_keyboard=True)

followers_arr = []

names = {
    0: '-',
    1: '.',
    2: '0',
    3: '1',
    4: '2',
    5: '3',
    6: '4',
    7: '5',
    8: '6',
    9: '7',
    10: '8',
    11: '9',
    12: 'num'
}

model_1 = YOLO("number_m_26p_6500e.pt")  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥—É–ª—è
model_2 = YOLO('digit_wo_m_40p_200e.pt')  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä

# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def send_hello(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –ó–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å? –Ø –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ä–µ—á—å –∏–∑ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ '
                        '—Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ. –¢–∞–∫–∂–µ —è –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–∏—Å–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫. –ù–∞–ø–∏—Ç–µ "/help" '
                        '–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', reply_markup=kb)


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply('–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ä–µ—á—å –∏–∑ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ '
                        '—Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ. –¢–∞–∫–∂–µ —è –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–∏—Å–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n')
    #–£–±—Ä–∞–Ω–Ω–æ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ —Ä–∞–±–æ—Ç–æ–π chatGPT
    """
                        '–ù–∞–ø–∏—à–∏—Ç–µ "/gpt_use" —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Chat_gpt.\n'
                        '–ù–∞–ø–∏—à–∏—Ç–µ "/gpt_ask" —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–ø—Ä–æ—Å–∞ Chat_gpt.\n'
                        '–ù–∞–ø–∏—à–∏—Ç–µ "/punctuation" —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.')
    """

"""
@dp.message_handler(commands=['gpt_use'])
async def main_gpt(message: types.Message):
    global GPT_use, punctuation, GPT_ask
    GPT_use = not GPT_use
    punctuation = GPT_use
    GPT_ask = GPT_use
    if GPT_use:
        await message.reply('ChatGPT –≤–∫–ª—é—á—ë–Ω')
    else:
        await message.reply('ChatGPT –≤—ã–∫–ª—é—á—ë–Ω')


@dp.message_handler(commands=['gpt_ask'])
async def gpt_asking_status(message: types.Message):
    global GPT_ask
    GPT_ask = not GPT_ask
    if GPT_ask:
        await message.reply('–ó–∞–¥–∞—á–∞ –≤–æ–ø—Ä–æ—Å–∞ Chat_gpt –≤–∫–ª—é—á—ë–Ω–∞')
    else:
        await message.reply('–ó–∞–¥–∞—á–∞ –≤–æ–ø—Ä–æ—Å–∞ Chat_gpt –≤—ã–∫–ª—é—á—ë–Ω–∞')


@dp.message_handler(commands=['punctuation'])
async def punctuation_status(message: types.Message):
    global punctuation
    punctuation = not punctuation
    if punctuation:
        await message.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–∞')
    else:
        await message.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞')
"""

# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(content_types=types.ContentType.TEXT)
async def make_task(message: types.Message):
    await message.answer(message.text)


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(content_types=types.ContentType.VOICE)
async def answer_to_voice(message: types.Message):
    voice = await message.voice.get_file()
    Path(f"{path}").mkdir(parents=True, exist_ok=True)
    await bot.download_file(file_path=voice.file_path, destination=f'{path}/{voice.file_id}.wav')
    await bot.download_file(file_path=voice.file_path, destination=f'{path}/qwerty.wav')
    data, samplerate = soundfile.read(f'{path}/qwerty.wav')
    soundfile.write(f'{path}/qwerty.wav', data, samplerate)
    wf = wave.open(rf'{path}/qwerty.wav')
    result = ''
    last_n = False
    while True:
        data = wf.readframes(44100)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            res = json.loads(rec.Result())
            if res['text'] != '':
                result += f" {res['text']}"
                last_n = False
            elif not last_n:
                result += '\n'
                last_n = True
    res = json.loads(rec.FinalResult())
    result += f" {res['text']}"
    await message.delete()
    if GPT_use:
        if punctuation:
            await message.answer_chat_action("typing")
            chatbot = Chatbot(config={"access_token": GPT_key})
            *_, result = chatbot.ask(f'–∏—Å–ø—Ä–∞–≤—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é: {result}')
            await message.answer(result['message'])
        else:
            await message.answer(result)
        if GPT_ask:
            await message.answer_chat_action("typing")
            chatbot = Chatbot(config={"access_token": GPT_key})
            *_, last = chatbot.ask(result['message'])
            await message.answer(last['message'])
    else:
        await message.answer(result)

# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def answer_to_photo(message: types.Message):
    file = await bot.download_file_by_id(file_id=message.photo[-1].file_id)
    im = Image.open(file)  # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
    # –ö—Ä–æ–ø –∑–Ω–∞—á–µ–Ω–∏—è
    results = model_1.predict(im, stream=True, save=True)
    for result in results:
        coord = str(result.boxes.xyxy[0])
        coord = coord[coord.find('[') + 1:coord.find(']')]
        coord = coord.split(', ')
        for i in range(4):
            coord[i] = float(coord[i])
        coord = tuple(coord)
        crop = im.crop(coord)
    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
    results = model_2.predict(crop, stream=True)
    for result in results:
        coord = str(result.boxes.xyxy)
        coord = coord[coord.find('[[') + 2:coord.find(']]')]
        coord = coord.split('],')
        for i in range(len(coord)):
            if '\n        [' in coord[i]:
                coord[i] = coord[i].replace('\n        [', '')
            coord[i] = coord[i].split(', ')
            for j in range(4):
                coord[i][j] = float(coord[i][j])
        classes = str(result.boxes.cls)
        classes = classes[classes.find('[') + 1:classes.find(']')]
        while ' ' in classes or '.' in classes:
            classes = classes.replace(' ', '')
            classes = classes.replace('.', '')
        classes = classes.split(',')
        for i in range(len(classes)):
            coord[i].append(names[int(classes[i])])
        coord.sort()
        num = ''
        for i in range(len(coord)):
            if coord[i][4] != 'num':
                num += coord[i][4]
            if coord[i][4] == '-' and i > 0:
                continue
        num = float(num)
        await message.answer(num)


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=[types.ContentType.ANY])
async def answer_to_voice(message: types.Message):
    await message.answer('–Ø –µ—â—ë –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
